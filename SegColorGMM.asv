% Load the color image
im = imread('road.png');

% Convert the image to RGB color space
rgb_im = im2double(im); % rgb_im: 240*320*3 matrix

% Reshape the image into a 2D array
rgb_im_2d = reshape(rgb_im, [], 3); % rgm_im_2d: 76800*3 matix

K = 5;
% Fit a Gaussian mixture model with 5 components
[mu, sigma, pi, ll, labels] = GMM(rgb_im_2d, K, 50);

% Predict the segment labels for each pixel
%labels = cluster(gmm, rgb_im_2d); % labels: 

% Find borderlines between gaussians:
border = zeros(1, K-1);
x = 0;
for k=1:K-1
    y1=0; y2=-1;
    while y2<y1
        y1=pi(k) * mvnpdf(x,mu(k)-1,sigma(k));
        kk=k+1;
        y2=pi(kk) * mvnpdf(x,mu(kk)-1,sigma(kk));
        x=x+1;
    end
    border(k)=x-1;
end

% Reshape the labels back into the original image dimensions with color
segmented_im = zeros(1, 320*240);

for i = 1:3
    % Extract the i-th channel (R, G, or B)
    channel = rgb_im(:,:,i);
    % Reshape the channel into a 1D array
    channel_1d = reshape(channel, [], 1);
    % Assign the segmented labels to the channel values
    channel_1d(labels==1) = mean(channel_1d(labels==1));
    channel_1d(labels==2) = mean(channel_1d(labels==2));
    channel_1d(labels==3) = mean(channel_1d(labels==3));
    channel_1d(labels==4) = mean(channel_1d(labels==4));
    channel_1d(labels==5) = mean(channel_1d(labels==5));

    % Reshape the channel back into the original image dimensions
    segmented_im(:,:,i) = reshape(channel_1d, size(im,1), size(im,2));
end

% Display the segmented image
imshow(segmented_im);
% Convert the segmented image back to RGB color space
segmented_im = im2uint8(segmented_im);
